/**
 * Generated by Scrooge
 *   version: 4.7.0
 *   rev: d9d56174937f524a1981b38ebd6280eef7eeda4a
 *   built at: 20160427-121552
 */
package com.github.iamsteveholmes

import com.twitter.scrooge.{
  LazyTProtocol,
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo,
  ThriftStructMetaData, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}


object Tweet extends ThriftStructCodec3[Tweet] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("Tweet")
  val UserIdField = new TField("userId", TType.I32, 1)
  val UserIdFieldManifest = implicitly[Manifest[Int]]
  val UserNameField = new TField("userName", TType.STRING, 2)
  val UserNameFieldManifest = implicitly[Manifest[String]]
  val TextField = new TField("text", TType.STRING, 3)
  val TextFieldManifest = implicitly[Manifest[String]]
  val LocField = new TField("loc", TType.STRING, 4)
  val LocFieldManifest = implicitly[Manifest[String]]
  val TweetTypeField = new TField("tweetType", TType.ENUM, 5)
  val TweetTypeFieldI32 = new TField("tweetType", TType.I32, 5)
  val TweetTypeFieldManifest = implicitly[Manifest[com.github.iamsteveholmes.TweetType]]
  val LanguageField = new TField("language", TType.STRING, 16)
  val LanguageFieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      UserIdField,
      false,
      true,
      UserIdFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      UserNameField,
      false,
      true,
      UserNameFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      TextField,
      false,
      true,
      TextFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      LocField,
      true,
      false,
      LocFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      TweetTypeField,
      false,
      false,
      TweetTypeFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    ),
    new ThriftStructFieldInfo(
      LanguageField,
      false,
      false,
      LanguageFieldManifest,
      _root_.scala.None,
      _root_.scala.None,
      immutable$Map.empty[String, String],
      immutable$Map.empty[String, String]
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map.empty[String, String]

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Tweet): Unit = {
    if (_item.userName == null) throw new TProtocolException("Required field userName cannot be null")
    if (_item.text == null) throw new TProtocolException("Required field text cannot be null")
  }

  def withoutPassthroughFields(original: Tweet): Tweet =
    new Immutable(
      userId =
        {
          val field = original.userId
          field
        },
      userName =
        {
          val field = original.userName
          field
        },
      text =
        {
          val field = original.text
          field
        },
      loc =
        {
          val field = original.loc
          field.map { field =>
            field
          }
        },
      tweetType =
        {
          val field = original.tweetType
          field
        },
      language =
        {
          val field = original.language
          field
        }
    )

  override def encode(_item: Tweet, _oproto: TProtocol): Unit = {
    _item.write(_oproto)
  }

  private[this] def lazyDecode(_iprot: LazyTProtocol): Tweet = {

    var userId: Int = 0
    var _got_userId = false
    var userNameOffset: Int = -1
    var _got_userName = false
    var textOffset: Int = -1
    var _got_text = false
    var locOffset: Int = -1
    var tweetType: com.github.iamsteveholmes.TweetType = TweetType.Tweet
    var languageOffset: Int = -1

    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false
    val _start_offset = _iprot.offset

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
    
                userId = readUserIdValue(_iprot)
                _got_userId = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'userId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                userNameOffset = _iprot.offsetSkipString
    
                _got_userName = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'userName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                textOffset = _iprot.offsetSkipString
    
                _got_text = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'text' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                locOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'loc' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
    
                tweetType = readTweetTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'tweetType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 16 =>
            _field.`type` match {
              case TType.STRING =>
                languageOffset = _iprot.offsetSkipString
    
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'language' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_userId) throw new TProtocolException("Required field 'userId' was not found in serialized data for struct Tweet")
    if (!_got_userName) throw new TProtocolException("Required field 'userName' was not found in serialized data for struct Tweet")
    if (!_got_text) throw new TProtocolException("Required field 'text' was not found in serialized data for struct Tweet")
    new LazyImmutable(
      _iprot,
      _iprot.buffer,
      _start_offset,
      _iprot.offset,
      userId,
      userNameOffset,
      textOffset,
      locOffset,
      tweetType,
      languageOffset,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  override def decode(_iprot: TProtocol): Tweet =
    _iprot match {
      case i: LazyTProtocol => lazyDecode(i)
      case i => eagerDecode(i)
    }

  private[this] def eagerDecode(_iprot: TProtocol): Tweet = {
    var userId: Int = 0
    var _got_userId = false
    var userName: String = null
    var _got_userName = false
    var text: String = null
    var _got_text = false
    var loc: _root_.scala.Option[String] = _root_.scala.None
    var tweetType: com.github.iamsteveholmes.TweetType = TweetType.Tweet
    var language: String = "english"
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.I32 =>
                userId = readUserIdValue(_iprot)
                _got_userId = true
              case _actualType =>
                val _expectedType = TType.I32
                throw new TProtocolException(
                  "Received wrong type for field 'userId' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING =>
                userName = readUserNameValue(_iprot)
                _got_userName = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'userName' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING =>
                text = readTextValue(_iprot)
                _got_text = true
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'text' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 4 =>
            _field.`type` match {
              case TType.STRING =>
                loc = _root_.scala.Some(readLocValue(_iprot))
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'loc' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 5 =>
            _field.`type` match {
              case TType.I32 | TType.ENUM =>
                tweetType = readTweetTypeValue(_iprot)
              case _actualType =>
                val _expectedType = TType.ENUM
                throw new TProtocolException(
                  "Received wrong type for field 'tweetType' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case 16 =>
            _field.`type` match {
              case TType.STRING =>
                language = readLanguageValue(_iprot)
              case _actualType =>
                val _expectedType = TType.STRING
                throw new TProtocolException(
                  "Received wrong type for field 'language' (expected=%s, actual=%s).".format(
                    ttypeToString(_expectedType),
                    ttypeToString(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    if (!_got_userId) throw new TProtocolException("Required field 'userId' was not found in serialized data for struct Tweet")
    if (!_got_userName) throw new TProtocolException("Required field 'userName' was not found in serialized data for struct Tweet")
    if (!_got_text) throw new TProtocolException("Required field 'text' was not found in serialized data for struct Tweet")
    new Immutable(
      userId,
      userName,
      text,
      loc,
      tweetType,
      language,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    userId: Int,
    userName: String,
    text: String,
    loc: _root_.scala.Option[String] = _root_.scala.None,
    tweetType: com.github.iamsteveholmes.TweetType = TweetType.Tweet,
    language: String = "english"
  ): Tweet =
    new Immutable(
      userId,
      userName,
      text,
      loc,
      tweetType,
      language
    )

  def unapply(_item: Tweet): _root_.scala.Option[scala.Product6[Int, String, String, Option[String], com.github.iamsteveholmes.TweetType, String]] = _root_.scala.Some(_item)


  @inline private def readUserIdValue(_iprot: TProtocol): Int = {
    _iprot.readI32()
  }

  @inline private def writeUserIdField(userId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UserIdField)
    writeUserIdValue(userId_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUserIdValue(userId_item: Int, _oprot: TProtocol): Unit = {
    _oprot.writeI32(userId_item)
  }

  @inline private def readUserNameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeUserNameField(userName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(UserNameField)
    writeUserNameValue(userName_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeUserNameValue(userName_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(userName_item)
  }

  @inline private def readTextValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeTextField(text_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TextField)
    writeTextValue(text_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTextValue(text_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(text_item)
  }

  @inline private def readLocValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeLocField(loc_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(LocField)
    writeLocValue(loc_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLocValue(loc_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(loc_item)
  }

  @inline private def readTweetTypeValue(_iprot: TProtocol): com.github.iamsteveholmes.TweetType = {
    com.github.iamsteveholmes.TweetType.getOrUnknown(_iprot.readI32())
  }

  @inline private def writeTweetTypeField(tweetType_item: com.github.iamsteveholmes.TweetType, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(TweetTypeFieldI32)
    writeTweetTypeValue(tweetType_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeTweetTypeValue(tweetType_item: com.github.iamsteveholmes.TweetType, _oprot: TProtocol): Unit = {
    _oprot.writeI32(tweetType_item.value)
  }

  @inline private def readLanguageValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  @inline private def writeLanguageField(language_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeFieldBegin(LanguageField)
    writeLanguageValue(language_item, _oprot)
    _oprot.writeFieldEnd()
  }

  @inline private def writeLanguageValue(language_item: String, _oprot: TProtocol): Unit = {
    _oprot.writeString(language_item)
  }


  object Immutable extends ThriftStructCodec3[Tweet] {
    override def encode(_item: Tweet, _oproto: TProtocol): Unit = { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Tweet = Tweet.decode(_iprot)
    override lazy val metaData: ThriftStructMetaData[Tweet] = Tweet.metaData
  }

  /**
   * The default read-only implementation of Tweet.  You typically should not need to
   * directly reference this class; instead, use the Tweet.apply method to construct
   * new instances.
   */
  class Immutable(
      val userId: Int,
      val userName: String,
      val text: String,
      val loc: _root_.scala.Option[String],
      val tweetType: com.github.iamsteveholmes.TweetType,
      val language: String,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Tweet {
    def this(
      userId: Int,
      userName: String,
      text: String,
      loc: _root_.scala.Option[String] = _root_.scala.None,
      tweetType: com.github.iamsteveholmes.TweetType = TweetType.Tweet,
      language: String = "english"
    ) = this(
      userId,
      userName,
      text,
      loc,
      tweetType,
      language,
      Map.empty
    )
  }

  /**
   * This is another Immutable, this however keeps strings as lazy values that are lazily decoded from the backing
   * array byte on read.
   */
  private[this] class LazyImmutable(
      _proto: LazyTProtocol,
      _buf: Array[Byte],
      _start_offset: Int,
      _end_offset: Int,
      val userId: Int,
      userNameOffset: Int,
      textOffset: Int,
      locOffset: Int,
      val tweetType: com.github.iamsteveholmes.TweetType,
      languageOffset: Int,
      override val _passthroughFields: immutable$Map[Short, TFieldBlob])
    extends Tweet {

    override def write(_oprot: TProtocol): Unit = {
      _oprot match {
        case i: LazyTProtocol => i.writeRaw(_buf, _start_offset, _end_offset - _start_offset)
        case _ => super.write(_oprot)
      }
    }

    lazy val userName: String =
      if (userNameOffset == -1)
        null
      else {
        _proto.decodeString(_buf, userNameOffset)
      }
    lazy val text: String =
      if (textOffset == -1)
        null
      else {
        _proto.decodeString(_buf, textOffset)
      }
    lazy val loc: _root_.scala.Option[String] =
      if (locOffset == -1)
        None
      else {
        Some(_proto.decodeString(_buf, locOffset))
      }
    lazy val language: String =
      if (languageOffset == -1)
        "english"
      else {
        _proto.decodeString(_buf, languageOffset)
      }

    /**
     * Override the super hash code to make it a lazy val rather than def.
     *
     * Calculating the hash code can be expensive, caching it where possible
     * can provide significant performance wins. (Key in a hash map for instance)
     * Usually not safe since the normal constructor will accept a mutable map or
     * set as an arg
     * Here however we control how the class is generated from serialized data.
     * With the class private and the contract that we throw away our mutable references
     * having the hash code lazy here is safe.
     */
    override lazy val hashCode = super.hashCode
  }

  /**
   * This Proxy trait allows you to extend the Tweet trait with additional state or
   * behavior and implement the read-only methods from Tweet using an underlying
   * instance.
   */
  trait Proxy extends Tweet {
    protected def _underlying_Tweet: Tweet
    override def userId: Int = _underlying_Tweet.userId
    override def userName: String = _underlying_Tweet.userName
    override def text: String = _underlying_Tweet.text
    override def loc: _root_.scala.Option[String] = _underlying_Tweet.loc
    override def tweetType: com.github.iamsteveholmes.TweetType = _underlying_Tweet.tweetType
    override def language: String = _underlying_Tweet.language
    override def _passthroughFields = _underlying_Tweet._passthroughFields
  }
}

trait Tweet
  extends ThriftStruct
  with scala.Product6[Int, String, String, Option[String], com.github.iamsteveholmes.TweetType, String]
  with java.io.Serializable
{
  import Tweet._

  def userId: Int
  def userName: String
  def text: String
  def loc: _root_.scala.Option[String]
  def tweetType: com.github.iamsteveholmes.TweetType
  def language: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = userId
  def _2 = userName
  def _3 = text
  def _4 = loc
  def _5 = tweetType
  def _6 = language


  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returned.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): _root_.scala.Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) match {
      case blob: _root_.scala.Some[TFieldBlob] => blob
      case _root_.scala.None => {
        val _fieldOpt: _root_.scala.Option[TField] =
          _fieldId match {
            case 1 =>
              if (true) {
                writeUserIdValue(userId, _oprot)
                _root_.scala.Some(Tweet.UserIdField)
              } else {
                _root_.scala.None
              }
            case 2 =>
              if (userName ne null) {
                writeUserNameValue(userName, _oprot)
                _root_.scala.Some(Tweet.UserNameField)
              } else {
                _root_.scala.None
              }
            case 3 =>
              if (text ne null) {
                writeTextValue(text, _oprot)
                _root_.scala.Some(Tweet.TextField)
              } else {
                _root_.scala.None
              }
            case 4 =>
              if (loc.isDefined) {
                writeLocValue(loc.get, _oprot)
                _root_.scala.Some(Tweet.LocField)
              } else {
                _root_.scala.None
              }
            case 5 =>
              if (tweetType ne null) {
                writeTweetTypeValue(tweetType, _oprot)
                _root_.scala.Some(Tweet.TweetTypeField)
              } else {
                _root_.scala.None
              }
            case 16 =>
              if (language ne null) {
                writeLanguageValue(language, _oprot)
                _root_.scala.Some(Tweet.LanguageField)
              } else {
                _root_.scala.None
              }
            case _ => _root_.scala.None
          }
        _fieldOpt match {
          case _root_.scala.Some(_field) =>
            val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
            _root_.scala.Some(TFieldBlob(_field, _data))
          case _root_.scala.None =>
            _root_.scala.None
        }
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Tweet = {
    var userId: Int = this.userId
    var userName: String = this.userName
    var text: String = this.text
    var loc: _root_.scala.Option[String] = this.loc
    var tweetType: com.github.iamsteveholmes.TweetType = this.tweetType
    var language: String = this.language
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        userId = readUserIdValue(_blob.read)
      case 2 =>
        userName = readUserNameValue(_blob.read)
      case 3 =>
        text = readTextValue(_blob.read)
      case 4 =>
        loc = _root_.scala.Some(readLocValue(_blob.read))
      case 5 =>
        tweetType = readTweetTypeValue(_blob.read)
      case 16 =>
        language = readLanguageValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      userId,
      userName,
      text,
      loc,
      tweetType,
      language,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Tweet = {
    var userId: Int = this.userId
    var userName: String = this.userName
    var text: String = this.text
    var loc: _root_.scala.Option[String] = this.loc
    var tweetType: com.github.iamsteveholmes.TweetType = this.tweetType
    var language: String = this.language

    _fieldId match {
      case 1 =>
        userId = 0
      case 2 =>
        userName = null
      case 3 =>
        text = null
      case 4 =>
        loc = _root_.scala.None
      case 5 =>
        tweetType = TweetType.Tweet
      case 16 =>
        language = "english"
      case _ =>
    }
    new Immutable(
      userId,
      userName,
      text,
      loc,
      tweetType,
      language,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is removed
   * from the passthroughFields map, if present.
   */
  def unsetUserId: Tweet = unsetField(1)

  def unsetUserName: Tweet = unsetField(2)

  def unsetText: Tweet = unsetField(3)

  def unsetLoc: Tweet = unsetField(4)

  def unsetTweetType: Tweet = unsetField(5)

  def unsetLanguage: Tweet = unsetField(16)


  override def write(_oprot: TProtocol): Unit = {
    Tweet.validate(this)
    _oprot.writeStructBegin(Struct)
    writeUserIdField(userId, _oprot)
    if (userName ne null) writeUserNameField(userName, _oprot)
    if (text ne null) writeTextField(text, _oprot)
    if (loc.isDefined) writeLocField(loc.get, _oprot)
    if (tweetType ne null) writeTweetTypeField(tweetType, _oprot)
    if (language ne null) writeLanguageField(language, _oprot)
    if (_passthroughFields.nonEmpty) {
      _passthroughFields.values.foreach { _.write(_oprot) }
    }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    userId: Int = this.userId,
    userName: String = this.userName,
    text: String = this.text,
    loc: _root_.scala.Option[String] = this.loc,
    tweetType: com.github.iamsteveholmes.TweetType = this.tweetType,
    language: String = this.language,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Tweet =
    new Immutable(
      userId,
      userName,
      text,
      loc,
      tweetType,
      language,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Tweet]

  override def equals(other: Any): Boolean =
    canEqual(other) &&
      _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[Tweet]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 6

  override def productElement(n: Int): Any = n match {
    case 0 => this.userId
    case 1 => this.userName
    case 2 => this.text
    case 3 => this.loc
    case 4 => this.tweetType
    case 5 => this.language
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Tweet"
}