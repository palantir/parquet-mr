/**
 * Generated by Scrooge
 *   version: 4.7.0
 *   rev: d9d56174937f524a1981b38ebd6280eef7eeda4a
 *   built at: 20160427-121552
 */
package com.github.iamsteveholmes

import com.twitter.scrooge.ThriftEnum


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object TweetType {
  
  case object Tweet extends com.github.iamsteveholmes.TweetType {
    val value: Int = 1
    val name: String = "Tweet"
    val originalName: String = "TWEET"
  }

  private[this] val _SomeTweet = _root_.scala.Some(com.github.iamsteveholmes.TweetType.Tweet)
  
  case object Retweet extends com.github.iamsteveholmes.TweetType {
    val value: Int = 2
    val name: String = "Retweet"
    val originalName: String = "RETWEET"
  }

  private[this] val _SomeRetweet = _root_.scala.Some(com.github.iamsteveholmes.TweetType.Retweet)
  
  case object Dm extends com.github.iamsteveholmes.TweetType {
    val value: Int = 3
    val name: String = "Dm"
    val originalName: String = "DM"
  }

  private[this] val _SomeDm = _root_.scala.Some(com.github.iamsteveholmes.TweetType.Dm)
  
  case object Reply extends com.github.iamsteveholmes.TweetType {
    val value: Int = 4
    val name: String = "Reply"
    val originalName: String = "REPLY"
  }

  private[this] val _SomeReply = _root_.scala.Some(com.github.iamsteveholmes.TweetType.Reply)

  case class EnumUnknownTweetType(value: Int) extends com.github.iamsteveholmes.TweetType {
    val name: String = "EnumUnknownTweetType" + value
    def originalName: String = name
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): com.github.iamsteveholmes.TweetType =
    value match {
      case 1 => com.github.iamsteveholmes.TweetType.Tweet
      case 2 => com.github.iamsteveholmes.TweetType.Retweet
      case 3 => com.github.iamsteveholmes.TweetType.Dm
      case 4 => com.github.iamsteveholmes.TweetType.Reply
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownTweetType(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): com.github.iamsteveholmes.TweetType =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownTweetType(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[com.github.iamsteveholmes.TweetType] =
    value match {
      case 1 => _SomeTweet
      case 2 => _SomeRetweet
      case 3 => _SomeDm
      case 4 => _SomeReply
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[com.github.iamsteveholmes.TweetType] =
    name.toLowerCase match {
      case "tweet" => _SomeTweet
      case "retweet" => _SomeRetweet
      case "dm" => _SomeDm
      case "reply" => _SomeReply
      case _ => _root_.scala.None
    }

  lazy val list: List[com.github.iamsteveholmes.TweetType] = scala.List[com.github.iamsteveholmes.TweetType](
    com.github.iamsteveholmes.TweetType.Tweet,
    com.github.iamsteveholmes.TweetType.Retweet,
    com.github.iamsteveholmes.TweetType.Dm,
    com.github.iamsteveholmes.TweetType.Reply
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait TweetType extends ThriftEnum with Serializable